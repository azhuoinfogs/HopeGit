#include "uringfs.h"
#include "iouring.h"
#include "boss_meta.h"
class BossMeta;
class BossIoUring;
struct  MetaData;
const char BossDBPath[] = "/opt/boss_meta";
typedef struct boss_handle {
  BossMeta* meta_rep;
  BossIoUring* io_rep;
}boss_handle_t;
boss_handle_t *boss = nullptr;
int ufs_getattr(const char *path, struct stat *stbuf)
{
    struct Metadata node;
    if (!boss->meta_rep->getMetadataByPath(path, &node))
    {
        return -errno;
    }
    stbuf->st_mode = node.is_directory ? S_IFDIR : S_IFREG;
    stbuf->st_nlink = node.nlink;
    // stbuf->st_size = node.file_size;
    // stbuf->st_blocks = node.blocks;
    // stbuf->st_uid = node.group_id; 
    // stbuf->st_gid = node.owner_id;
    // stbuf->st_mtime = node.mtime;
    // stbuf->st_atime = node.atime;
    // stbuf->st_ctime = node.mtime;

    // // Directories contain the implicit hardlink '.'
    // if (S_ISDIR(node.is_directory))
    // {
    //     stbuf->st_nlink++;
    // }
    return 0;
}
int ufs_readlink(const char *path, char *buf, size_t size) {
    return 0;
}
int ufs_getdir(const char *path, fuse_dirh_t dir, fuse_dirfil_t filler) {
    return 0;
}
int ufs_readdir(const char *path, void *buf, fuse_fill_dir_t filler, off_t offset, struct fuse_file_info *fi) {
    return 0;
}
int ufs_mknod(const char *path, mode_t mode, dev_t rdev) {
    return 0;
}
int ufs_mkdir(const char *path, mode_t mode) {
    return 0;
}
int ufs_unlink(const char *path) {
    return 0;
}
int ufs_rmdir(const char *path) {
    return 0;
}
int ufs_symlink(const char *from, const char *to) {
    return 0;
}
int ufs_rename(const char *from, const char *to) {
    return 0;
}
int ufs_link(const char *from, const char *to) {
    return 0;
}
int ufs_chmod(const char *path, mode_t mode) {
    return 0;
}
int ufs_chown(const char *path, uid_t uid, gid_t gid) {
    return 0;
}
int ufs_utimens(const char *path, const struct timespec ts[2]) {
    return 0;
}
int ufs_truncate(const char *path, off_t size) {
    return 0;
}
int ufs_open(const char *path, struct fuse_file_info *fi) {
    return 0;
}
int ufs_read(const char *path, char *buf, size_t size, off_t offset, struct fuse_file_info *fi) {
    return 0;
}
int ufs_write(const char *path, const char *buf, size_t size, off_t offset, struct fuse_file_info *fi) {
    return 0;
}
int ufs_release(const char *path, struct fuse_file_info *fi) {
    return 0;
}
int ufs_create() {
  boss = new boss_handle_t();
  boss->meta_rep = new BossMeta(BossDBPath);
  boss->io_rep = new BossIoUring(8, NULL);
  return 0;
}
int ufs_destroy() {
    return 0;
}