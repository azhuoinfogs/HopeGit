// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_engine.proto

#include "db_engine.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace kv_store {
constexpr DBRequest::DBRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : db_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , db_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DBRequestDefaultTypeInternal {
  constexpr DBRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBRequestDefaultTypeInternal() {}
  union {
    DBRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBRequestDefaultTypeInternal _DBRequest_default_instance_;
constexpr DBResponse::DBResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : db_res_(nullptr)
  , code_(0)
{}
struct DBResponseDefaultTypeInternal {
  constexpr DBResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBResponseDefaultTypeInternal() {}
  union {
    DBResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBResponseDefaultTypeInternal _DBResponse_default_instance_;
}  // namespace kv_store
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_db_5fengine_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_db_5fengine_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_db_5fengine_2eproto[1];

const uint32_t TableStruct_db_5fengine_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::kv_store::DBRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kv_store::DBRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kv_store::DBRequest, db_key_),
  PROTOBUF_FIELD_OFFSET(::kv_store::DBRequest, db_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::kv_store::DBResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kv_store::DBResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kv_store::DBResponse, code_),
  PROTOBUF_FIELD_OFFSET(::kv_store::DBResponse, db_res_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::kv_store::DBRequest)},
  { 10, 18, -1, sizeof(::kv_store::DBResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kv_store::_DBRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kv_store::_DBResponse_default_instance_),
};

const char descriptor_table_protodef_db_5fengine_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017db_engine.proto\022\010kv_store\"1\n\tDBRequest"
  "\022\020\n\006db_key\030\001 \001(\t:\000\022\022\n\010db_value\030\002 \001(\t:\000\"G"
  "\n\nDBResponse\022#\n\004code\030\001 \001(\0162\020.kv_store.DB"
  "Code:\003SUC\022\024\n\006db_res\030\002 \001(\t:\004NULL*\'\n\006DBCod"
  "e\022\007\n\003SUC\020\000\022\007\n\003ERR\020\001\022\013\n\007NOFOUND\020\0032\250\001\n\rEng"
  "ineService\0220\n\003Put\022\023.kv_store.DBRequest\032\024"
  ".kv_store.DBResponse\0220\n\003Get\022\023.kv_store.D"
  "BRequest\032\024.kv_store.DBResponse\0223\n\006Delete"
  "\022\023.kv_store.DBRequest\032\024.kv_store.DBRespo"
  "nseB\003\200\001\001"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_db_5fengine_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_db_5fengine_2eproto = {
  false, false, 368, descriptor_table_protodef_db_5fengine_2eproto, "db_engine.proto", 
  &descriptor_table_db_5fengine_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_db_5fengine_2eproto::offsets,
  file_level_metadata_db_5fengine_2eproto, file_level_enum_descriptors_db_5fengine_2eproto, file_level_service_descriptors_db_5fengine_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_db_5fengine_2eproto_getter() {
  return &descriptor_table_db_5fengine_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_db_5fengine_2eproto(&descriptor_table_db_5fengine_2eproto);
namespace kv_store {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DBCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_5fengine_2eproto);
  return file_level_enum_descriptors_db_5fengine_2eproto[0];
}
bool DBCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class DBRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DBRequest>()._has_bits_);
  static void set_has_db_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_db_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DBRequest::DBRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kv_store.DBRequest)
}
DBRequest::DBRequest(const DBRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    db_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_db_key()) {
    db_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_db_key(), 
      GetArenaForAllocation());
  }
  db_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    db_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_db_value()) {
    db_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_db_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kv_store.DBRequest)
}

inline void DBRequest::SharedCtor() {
db_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  db_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
db_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  db_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DBRequest::~DBRequest() {
  // @@protoc_insertion_point(destructor:kv_store.DBRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DBRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  db_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DBRequest::ArenaDtor(void* object) {
  DBRequest* _this = reinterpret_cast< DBRequest* >(object);
  (void)_this;
}
void DBRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kv_store.DBRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      db_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      db_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string db_key = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kv_store.DBRequest.db_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string db_value = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kv_store.DBRequest.db_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kv_store.DBRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string db_key = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_db_key().data(), static_cast<int>(this->_internal_db_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "kv_store.DBRequest.db_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_key(), target);
  }

  // optional string db_value = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_db_value().data(), static_cast<int>(this->_internal_db_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "kv_store.DBRequest.db_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kv_store.DBRequest)
  return target;
}

size_t DBRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kv_store.DBRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string db_key = 1 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_db_key());
    }

    // optional string db_value = 2 [default = ""];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_db_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBRequest::GetClassData() const { return &_class_data_; }

void DBRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBRequest *>(to)->MergeFrom(
      static_cast<const DBRequest &>(from));
}


void DBRequest::MergeFrom(const DBRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kv_store.DBRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_db_key(from._internal_db_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_db_value(from._internal_db_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBRequest::CopyFrom(const DBRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kv_store.DBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBRequest::IsInitialized() const {
  return true;
}

void DBRequest::InternalSwap(DBRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &db_key_, lhs_arena,
      &other->db_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &db_value_, lhs_arena,
      &other->db_value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DBRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_db_5fengine_2eproto_getter, &descriptor_table_db_5fengine_2eproto_once,
      file_level_metadata_db_5fengine_2eproto[0]);
}

// ===================================================================

class DBResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DBResponse>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_db_res(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString DBResponse::_i_give_permission_to_break_this_code_default_db_res_{{{"NULL", 4}}, {nullptr}};
DBResponse::DBResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kv_store.DBResponse)
}
DBResponse::DBResponse(const DBResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_res_.UnsafeSetDefault(nullptr);
  if (from._internal_has_db_res()) {
    db_res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_db_res(), 
      GetArenaForAllocation());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:kv_store.DBResponse)
}

inline void DBResponse::SharedCtor() {
db_res_.UnsafeSetDefault(nullptr);
code_ = 0;
}

DBResponse::~DBResponse() {
  // @@protoc_insertion_point(destructor:kv_store.DBResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DBResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  db_res_.DestroyNoArena(nullptr);
}

void DBResponse::ArenaDtor(void* object) {
  DBResponse* _this = reinterpret_cast< DBResponse* >(object);
  (void)_this;
}
void DBResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kv_store.DBResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    db_res_.ClearToDefault(::kv_store::DBResponse::_i_give_permission_to_break_this_code_default_db_res_, GetArenaForAllocation());
     }
  code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .kv_store.DBCode code = 1 [default = SUC];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::kv_store::DBCode_IsValid(val))) {
            _internal_set_code(static_cast<::kv_store::DBCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string db_res = 2 [default = "NULL"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_db_res();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kv_store.DBResponse.db_res");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kv_store.DBResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .kv_store.DBCode code = 1 [default = SUC];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // optional string db_res = 2 [default = "NULL"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_db_res().data(), static_cast<int>(this->_internal_db_res().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "kv_store.DBResponse.db_res");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_db_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kv_store.DBResponse)
  return target;
}

size_t DBResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kv_store.DBResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string db_res = 2 [default = "NULL"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_db_res());
    }

    // optional .kv_store.DBCode code = 1 [default = SUC];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBResponse::GetClassData() const { return &_class_data_; }

void DBResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBResponse *>(to)->MergeFrom(
      static_cast<const DBResponse &>(from));
}


void DBResponse::MergeFrom(const DBResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kv_store.DBResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_db_res(from._internal_db_res());
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBResponse::CopyFrom(const DBResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kv_store.DBResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBResponse::IsInitialized() const {
  return true;
}

void DBResponse::InternalSwap(DBResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &db_res_, lhs_arena,
      &other->db_res_, rhs_arena
  );
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_db_5fengine_2eproto_getter, &descriptor_table_db_5fengine_2eproto_once,
      file_level_metadata_db_5fengine_2eproto[1]);
}

// ===================================================================

EngineService::~EngineService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* EngineService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_5fengine_2eproto);
  return file_level_service_descriptors_db_5fengine_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* EngineService::GetDescriptor() {
  return descriptor();
}

void EngineService::Put(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::kv_store::DBRequest*,
                         ::kv_store::DBResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Put() not implemented.");
  done->Run();
}

void EngineService::Get(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::kv_store::DBRequest*,
                         ::kv_store::DBResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Get() not implemented.");
  done->Run();
}

void EngineService::Delete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::kv_store::DBRequest*,
                         ::kv_store::DBResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Delete() not implemented.");
  done->Run();
}

void EngineService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_db_5fengine_2eproto[0]);
  switch(method->index()) {
    case 0:
      Put(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::kv_store::DBRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::kv_store::DBResponse*>(
                 response),
             done);
      break;
    case 1:
      Get(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::kv_store::DBRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::kv_store::DBResponse*>(
                 response),
             done);
      break;
    case 2:
      Delete(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::kv_store::DBRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::kv_store::DBResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& EngineService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::kv_store::DBRequest::default_instance();
    case 1:
      return ::kv_store::DBRequest::default_instance();
    case 2:
      return ::kv_store::DBRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& EngineService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::kv_store::DBResponse::default_instance();
    case 1:
      return ::kv_store::DBResponse::default_instance();
    case 2:
      return ::kv_store::DBResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

EngineService_Stub::EngineService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
EngineService_Stub::EngineService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
EngineService_Stub::~EngineService_Stub() {
  if (owns_channel_) delete channel_;
}

void EngineService_Stub::Put(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::kv_store::DBRequest* request,
                              ::kv_store::DBResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void EngineService_Stub::Get(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::kv_store::DBRequest* request,
                              ::kv_store::DBResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void EngineService_Stub::Delete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::kv_store::DBRequest* request,
                              ::kv_store::DBResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace kv_store
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kv_store::DBRequest* Arena::CreateMaybeMessage< ::kv_store::DBRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kv_store::DBRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kv_store::DBResponse* Arena::CreateMaybeMessage< ::kv_store::DBResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kv_store::DBResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
