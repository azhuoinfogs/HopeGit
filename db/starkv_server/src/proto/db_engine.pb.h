// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_engine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_db_5fengine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_db_5fengine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_db_5fengine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_db_5fengine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_db_5fengine_2eproto;
namespace kv_store {
class DBRequest;
struct DBRequestDefaultTypeInternal;
extern DBRequestDefaultTypeInternal _DBRequest_default_instance_;
class DBResponse;
struct DBResponseDefaultTypeInternal;
extern DBResponseDefaultTypeInternal _DBResponse_default_instance_;
}  // namespace kv_store
PROTOBUF_NAMESPACE_OPEN
template<> ::kv_store::DBRequest* Arena::CreateMaybeMessage<::kv_store::DBRequest>(Arena*);
template<> ::kv_store::DBResponse* Arena::CreateMaybeMessage<::kv_store::DBResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kv_store {

enum DBCode : int {
  SUC = 0,
  ERR = 1,
  NOFOUND = 3
};
bool DBCode_IsValid(int value);
constexpr DBCode DBCode_MIN = SUC;
constexpr DBCode DBCode_MAX = NOFOUND;
constexpr int DBCode_ARRAYSIZE = DBCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DBCode_descriptor();
template<typename T>
inline const std::string& DBCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DBCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DBCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DBCode_descriptor(), enum_t_value);
}
inline bool DBCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DBCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DBCode>(
    DBCode_descriptor(), name, value);
}
// ===================================================================

class DBRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv_store.DBRequest) */ {
 public:
  inline DBRequest() : DBRequest(nullptr) {}
  ~DBRequest() override;
  explicit constexpr DBRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBRequest(const DBRequest& from);
  DBRequest(DBRequest&& from) noexcept
    : DBRequest() {
    *this = ::std::move(from);
  }

  inline DBRequest& operator=(const DBRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBRequest& operator=(DBRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBRequest* internal_default_instance() {
    return reinterpret_cast<const DBRequest*>(
               &_DBRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DBRequest& a, DBRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DBRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv_store.DBRequest";
  }
  protected:
  explicit DBRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbKeyFieldNumber = 1,
    kDbValueFieldNumber = 2,
  };
  // optional string db_key = 1 [default = ""];
  bool has_db_key() const;
  private:
  bool _internal_has_db_key() const;
  public:
  void clear_db_key();
  const std::string& db_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_key();
  PROTOBUF_NODISCARD std::string* release_db_key();
  void set_allocated_db_key(std::string* db_key);
  private:
  const std::string& _internal_db_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_key(const std::string& value);
  std::string* _internal_mutable_db_key();
  public:

  // optional string db_value = 2 [default = ""];
  bool has_db_value() const;
  private:
  bool _internal_has_db_value() const;
  public:
  void clear_db_value();
  const std::string& db_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_value();
  PROTOBUF_NODISCARD std::string* release_db_value();
  void set_allocated_db_value(std::string* db_value);
  private:
  const std::string& _internal_db_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_value(const std::string& value);
  std::string* _internal_mutable_db_value();
  public:

  // @@protoc_insertion_point(class_scope:kv_store.DBRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_value_;
  friend struct ::TableStruct_db_5fengine_2eproto;
};
// -------------------------------------------------------------------

class DBResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv_store.DBResponse) */ {
 public:
  inline DBResponse() : DBResponse(nullptr) {}
  ~DBResponse() override;
  explicit constexpr DBResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBResponse(const DBResponse& from);
  DBResponse(DBResponse&& from) noexcept
    : DBResponse() {
    *this = ::std::move(from);
  }

  inline DBResponse& operator=(const DBResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBResponse& operator=(DBResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBResponse* internal_default_instance() {
    return reinterpret_cast<const DBResponse*>(
               &_DBResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DBResponse& a, DBResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DBResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv_store.DBResponse";
  }
  protected:
  explicit DBResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbResFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // optional string db_res = 2 [default = "NULL"];
  bool has_db_res() const;
  private:
  bool _internal_has_db_res() const;
  public:
  void clear_db_res();
  const std::string& db_res() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_res(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_res();
  PROTOBUF_NODISCARD std::string* release_db_res();
  void set_allocated_db_res(std::string* db_res);
  private:
  const std::string& _internal_db_res() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_res(const std::string& value);
  std::string* _internal_mutable_db_res();
  public:

  // optional .kv_store.DBCode code = 1 [default = SUC];
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::kv_store::DBCode code() const;
  void set_code(::kv_store::DBCode value);
  private:
  ::kv_store::DBCode _internal_code() const;
  void _internal_set_code(::kv_store::DBCode value);
  public:

  // @@protoc_insertion_point(class_scope:kv_store.DBResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_db_res_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_res_;
  int code_;
  friend struct ::TableStruct_db_5fengine_2eproto;
};
// ===================================================================

class EngineService_Stub;

class EngineService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline EngineService() {};
 public:
  virtual ~EngineService();

  typedef EngineService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Put(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kv_store::DBRequest* request,
                       ::kv_store::DBResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Get(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kv_store::DBRequest* request,
                       ::kv_store::DBResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Delete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kv_store::DBRequest* request,
                       ::kv_store::DBResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EngineService);
};

class EngineService_Stub : public EngineService {
 public:
  EngineService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  EngineService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~EngineService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements EngineService ------------------------------------------

  void Put(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kv_store::DBRequest* request,
                       ::kv_store::DBResponse* response,
                       ::google::protobuf::Closure* done);
  void Get(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kv_store::DBRequest* request,
                       ::kv_store::DBResponse* response,
                       ::google::protobuf::Closure* done);
  void Delete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kv_store::DBRequest* request,
                       ::kv_store::DBResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EngineService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DBRequest

// optional string db_key = 1 [default = ""];
inline bool DBRequest::_internal_has_db_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DBRequest::has_db_key() const {
  return _internal_has_db_key();
}
inline void DBRequest::clear_db_key() {
  db_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DBRequest::db_key() const {
  // @@protoc_insertion_point(field_get:kv_store.DBRequest.db_key)
  return _internal_db_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBRequest::set_db_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 db_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kv_store.DBRequest.db_key)
}
inline std::string* DBRequest::mutable_db_key() {
  std::string* _s = _internal_mutable_db_key();
  // @@protoc_insertion_point(field_mutable:kv_store.DBRequest.db_key)
  return _s;
}
inline const std::string& DBRequest::_internal_db_key() const {
  return db_key_.Get();
}
inline void DBRequest::_internal_set_db_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  db_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DBRequest::_internal_mutable_db_key() {
  _has_bits_[0] |= 0x00000001u;
  return db_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DBRequest::release_db_key() {
  // @@protoc_insertion_point(field_release:kv_store.DBRequest.db_key)
  if (!_internal_has_db_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = db_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (db_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    db_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DBRequest::set_allocated_db_key(std::string* db_key) {
  if (db_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  db_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (db_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    db_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kv_store.DBRequest.db_key)
}

// optional string db_value = 2 [default = ""];
inline bool DBRequest::_internal_has_db_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DBRequest::has_db_value() const {
  return _internal_has_db_value();
}
inline void DBRequest::clear_db_value() {
  db_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DBRequest::db_value() const {
  // @@protoc_insertion_point(field_get:kv_store.DBRequest.db_value)
  return _internal_db_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBRequest::set_db_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 db_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kv_store.DBRequest.db_value)
}
inline std::string* DBRequest::mutable_db_value() {
  std::string* _s = _internal_mutable_db_value();
  // @@protoc_insertion_point(field_mutable:kv_store.DBRequest.db_value)
  return _s;
}
inline const std::string& DBRequest::_internal_db_value() const {
  return db_value_.Get();
}
inline void DBRequest::_internal_set_db_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  db_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DBRequest::_internal_mutable_db_value() {
  _has_bits_[0] |= 0x00000002u;
  return db_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DBRequest::release_db_value() {
  // @@protoc_insertion_point(field_release:kv_store.DBRequest.db_value)
  if (!_internal_has_db_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = db_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (db_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    db_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DBRequest::set_allocated_db_value(std::string* db_value) {
  if (db_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  db_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (db_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    db_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kv_store.DBRequest.db_value)
}

// -------------------------------------------------------------------

// DBResponse

// optional .kv_store.DBCode code = 1 [default = SUC];
inline bool DBResponse::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DBResponse::has_code() const {
  return _internal_has_code();
}
inline void DBResponse::clear_code() {
  code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::kv_store::DBCode DBResponse::_internal_code() const {
  return static_cast< ::kv_store::DBCode >(code_);
}
inline ::kv_store::DBCode DBResponse::code() const {
  // @@protoc_insertion_point(field_get:kv_store.DBResponse.code)
  return _internal_code();
}
inline void DBResponse::_internal_set_code(::kv_store::DBCode value) {
  assert(::kv_store::DBCode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  code_ = value;
}
inline void DBResponse::set_code(::kv_store::DBCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:kv_store.DBResponse.code)
}

// optional string db_res = 2 [default = "NULL"];
inline bool DBResponse::_internal_has_db_res() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DBResponse::has_db_res() const {
  return _internal_has_db_res();
}
inline void DBResponse::clear_db_res() {
  db_res_.ClearToDefault(::kv_store::DBResponse::_i_give_permission_to_break_this_code_default_db_res_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DBResponse::db_res() const {
  // @@protoc_insertion_point(field_get:kv_store.DBResponse.db_res)
  if (db_res_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_db_res_.get();
  return _internal_db_res();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBResponse::set_db_res(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 db_res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kv_store.DBResponse.db_res)
}
inline std::string* DBResponse::mutable_db_res() {
  std::string* _s = _internal_mutable_db_res();
  // @@protoc_insertion_point(field_mutable:kv_store.DBResponse.db_res)
  return _s;
}
inline const std::string& DBResponse::_internal_db_res() const {
  return db_res_.Get();
}
inline void DBResponse::_internal_set_db_res(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  db_res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DBResponse::_internal_mutable_db_res() {
  _has_bits_[0] |= 0x00000001u;
  return db_res_.Mutable(::kv_store::DBResponse::_i_give_permission_to_break_this_code_default_db_res_, GetArenaForAllocation());
}
inline std::string* DBResponse::release_db_res() {
  // @@protoc_insertion_point(field_release:kv_store.DBResponse.db_res)
  if (!_internal_has_db_res()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = db_res_.ReleaseNonDefault(nullptr, GetArenaForAllocation());
  return p;
}
inline void DBResponse::set_allocated_db_res(std::string* db_res) {
  if (db_res != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  db_res_.SetAllocated(nullptr, db_res,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kv_store.DBResponse.db_res)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kv_store

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kv_store::DBCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kv_store::DBCode>() {
  return ::kv_store::DBCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_db_5fengine_2eproto
